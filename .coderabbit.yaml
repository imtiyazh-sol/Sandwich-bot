# .coderabbit.yaml

# Define review rules
rules:
  - name: Ensure error handling is present
    description: "Check that functions return errors and handle them correctly."
    severity: error
    match: |
      function .* {
        if (!return_type.contains("error")) {
          raise "Functions should return an error type if they can fail."
        }
      }

  - name: Enforce idiomatic Go naming conventions
    description: "Variables and functions should follow Go naming conventions."
    severity: warning
    match: |
      identifier .* {
        if (identifier != identifier.lower() and !is_exported) {
          raise "Private identifiers should be in camelCase."
        }
      }

  - name: Avoid global variables
    description: "Discourage the use of global variables."
    severity: warning
    match: |
      variable .* {
        if (is_global) {
          raise "Avoid using global variables where possible."
        }
      }

  - name: Check for unused imports
    description: "Ensure no unused imports are present."
    severity: warning
    match: |
      import .* {
        if (is_unused) {
          raise "Remove unused imports."
        }
      }

  - name: Enforce comments on exported functions
    description: "All exported functions should have docstring comments."
    severity: info
    match: |
      function .* {
        if (is_exported and !has_docstring) {
          raise "Exported functions should have a comment."
        }
      }

# Configure files to include/exclude
include:
  - "src/**/*.go"
  - "pkg/**/*.go"

exclude:
  - "vendor/**/*.go"
  - "testdata/**/*.go"

# Configure pull request review settings
pull_request_review:
  title: "Code Review"
  body: "Automated review by CodeRabbit."
  approve: true

# Notification settings
notifications:
  email: true

# Performance thresholds
performance:
  max_line_complexity: 15
  max_function_complexity: 10
  max_file_size_kb: 100

# Limit review to PR scope
pr_scope: true

# Reviewer guidelines
review_guidelines:
  - "Follow idiomatic Go practices."
  - "Minimize complex logic."
  - "Ensure test coverage for new code."
